(function () {  //method from: https://community.canvaslms.com/thread/22500-mobile-javascript-development
    // The following function will retrieve and load a JavaScript file - https://www.nczonline.net/blog/2009/07/28/the-best-way-to-load-external-javascript/
    /*function loadScript(url, callback) {
        var script = document.createElement("script");
        script.type = "text/javascript";
        if (script.readyState) { //IE
            script.onreadystatechange = function () {
                if (script.readyState == "loaded" || script.readyState == "complete") {
                    script.onreadystatechange = null;
                    callback();
                }
            };
        } else { //Others
            script.onload = function () {
                callback();
            };
        }
        script.src = url;
        document.getElementsByTagName("head")[0].appendChild(script);
    }*/
    
    /*************************************************************
     *
     * Inserting Canvas_Module-Tiles from here: https://github.com/msdlt/canvas-module-tiles/blob/master/canvas-module-tiles.js
     *
     *************************************************************/
    
    /* 
     * Add tiles at top of modules tool:
     * - Tiles are generated by calling the Canvas api, not by scraping the Modules page as before (should be more reliable as Canvas in upgraded)
     * - Added a drop-down arrow which gives you a quick link to the Module item (page, discussion, etc) - NOTE: not if table id="homePageTableTilesOnly"
     * - Tiles will show any images put into a specific folder in the Course’s Files (this defaults to looking for a ’tiles’ folder). If no folder or too few images for the number of Modules, colours are used instead
     * - If Modules page is the Home Page:
     *      - Modules further down the page gain a coloured border to help tie things together - this relied on DOM staying the same so more likely to break with Canvas updates
     *      - I’ve added a Top button to each module which scrolls you back up to the dashboard view
     * - Clicking the tile anywhere except the drop-down arrow scrolls you down the Modules page to the appropriate Module - NOTE: this is the ONLY behaviour if table id="homePageTableTilesOnly"
     */

    // TODO Essential - add icons for all itemTypes
    // TODO Essential - Change positioning of moduleTileList to below tile to prevent menu being hidden on RH tiles when shown in a Home Page
    // TODO Essential - deal with noOfColumnsPerRow other than 4 - newColumn.className
    // TODO Should - create multi-level menu with first level defined by Text headers in a Module and items below that forming the second level
    // TODO Could - show completion either on links or as e.g 10/12 - will have to reinstate msd_getSelfThenModules AND chcek that the user is a students and will therefore have completion data

    /* Configurable variables */
    //var showOnModulesHomePage = 1;	//Should the module tiles be shown at the top of the Modules Home Page. 0 = No; 1 = Yes. Suggest defaulting to 0, so all courses using the Modules Home Page aren't immediately affected when this is applied to a subaccount.
    var noOfColumnsPerRow = 4;  //no of columns per row of tiles at top of Modules page - 1, 2, 3, 4, 6 or 12 - ONLY USE 4 for the moment
    var tileImagesFolderName = "tiles"; //CHECK
    /* first 9 are requested colors, rest are randomly selected from: https://www.ox.ac.uk/public-affairs/style-guide/digital-style-guide */
    //JHM 2018-20-16: Removed some that were too light, and reordered some that did not look good next to each other, but only up to the first 14 colours (3.5 lines)
    var moduleColours = [
        '#e8ab1e','#91b2c6','#517f96','#1c4f68',
        '#400b42','#293f11','#640D14','#b29295',
        '#002147','#cf7a30','#a79d96','#aab300',
        '#872434','#043946','#fb8113','#be0f34',
        '#a1c4d0','#122f53','#0f7361','#3277ae',
        '#44687d','#517fa4','#177770','#be0f34',
        '#d34836','#70a9d6','#69913b','#d62a2a',
        '#5f9baf','#09332b','#44687d','#721627',
        '#9eceeb','#330d14','#006599','#cf7a30',
        '#a79d96','#be0f34','#001c3d','#ac48bf',
        '#9c4700','#c7302b','#ebc4cb','#1daced'
    ];
    var showItemLinks = 1; //whether or not to show drop-down links to items within Modules in tiles

    /* DOM elements to chcek for */
    var divCourseHomeContent = document.getElementById('course_home_content');  //is this page Home
    var divContent = document.getElementById('content');
    var divContextModulesContainer = document.getElementById('context_modules_sortable_container');  //are we on the Modules page
    var aModules = document.querySelector('li.section a[title="Modules"]'); //retutrns breadcrumbs AND lh Nav
    var moduleIdByModuleItemId = [] //used to store moduleIds using the ModuleItemId (as shown in url for pages, etc) so we can show active sub-modules
    
    //var tableHomePageTable = document.getElementById('homePageTable');  //CHECK id of table which will be replaced in Page on web when it is the Home Page
    //var tableHomePageTableTilesOnly = document.getElementById('homePageTableTilesOnly');  //CHECK id of table which will be replaced in Page on web when it is the Home Page - no drop-dwn list of items

    //Working out where we are 
    var initCourseId = msd_getCourseId();  //which course are we in ONLY WORKS ON WEB
    var initModuleItemId = msd_getModuleItemId();  //0 or module_item_id from URL (ie only if launched through Modules) 
    var initModuleId = msd_getModuleId();  //0 or module being viewed within Modules page

    var moduleNav;
    var tileImageUrls = [];  //CHECK

    /* Wait until DOM ready before loading tiles */
    function msd_domReady () {
        //New LH menu navigation - show on ALL pages in course
        //get embedded ul of Modules to append to liModules
        if(initCourseId) {
            if(initModuleId) {
                //we're on Modules page with link to specific module - let's hide other Modules'
                var otherModuleDivs = document.querySelectorAll('div.context_module:not([data-module-id="'+initModuleId+'"])'); //should only be one!; //should only be one!
                Array.prototype.forEach.call(otherModuleDivs, function(otherModuleDiv){
                    otherModuleDiv.style.display = 'none';    
                });
            }
            msd_getModulesAsUl(initCourseId);
            //if(divContextModulesContainer) {
            //    divContextModulesContainer.style.visibility = 'visible';  
            //}
        }
        
        /*if(divCourseHomeContent && divContextModulesContainer && showOnModulesHomePage){
            //we're in the modules page as a home page
            //first delete any existing nav container
            var existingModuleNav = document.getElementById('module_nav');
            if(existingModuleNav) {
                existingModuleNav.parentNode.removeChild(existingModuleNav);
            }
            //create our nav container
            moduleNav = document.createElement("div");
            moduleNav.id = "module_nav";
            moduleNav.className = "ou-ModuleCard__box";
            moduleNav.innerHTML = '<a id="module_nav_anchor"></a>';
            divContent.insertBefore(moduleNav, divContent.childNodes[0]); 
            //now get modules from api
            if(initCourseId) {
                msd_getTileFolder(initCourseId);
            }
        } else if(divCourseHomeContent && (tableHomePageTable || tableHomePageTableTilesOnly)){  //CHECK
            //we're in in a home page which contains a table with id="homePageTable"
            //create our nav container
            moduleNav = document.createElement("div");
            moduleNav.id = "module_nav";
            moduleNav.className = "ou-ModuleCard__box";
            moduleNav.innerHTML = '<a id="module_nav_anchor"></a>';
            //replace table#homePageTable with our moduleNav
            var tableToReplace = tableHomePageTable || tableHomePageTableTilesOnly;
            tableToReplace.parentNode.replaceChild(moduleNav, tableToReplace);
            //check whether we have a initCourseId
            if(!initCourseId) {
                //get it from table data-course-id
                if(tableHomePageTable) {
                    initCourseId = parseInt(tableHomePageTable.getAttribute("data-course-id"));
                } else if (tableHomePageTableTilesOnly) {
                    initCourseId = parseInt(tableHomePageTableTilesOnly.getAttribute("data-course-id"));
                }
            }
            //now get modules from api
            if(initCourseId) {
                msd_getTileFolder(initCourseId);
            }
        }*/
    }

    //Function to work out when the DOM is ready: https://stackoverflow.com/questions/1795089/how-can-i-detect-dom-ready-and-add-a-class-without-jquery/1795167#1795167
    // Mozilla, Opera, Webkit 
    if ( document.addEventListener ) {
        document.addEventListener( "DOMContentLoaded", function(){
            document.removeEventListener( "DOMContentLoaded", arguments.callee, false);
            msd_domReady();
        }, false );
    // If IE event model is used
    } else if ( document.attachEvent ) {
        // ensure firing before onload
        document.attachEvent("onreadystatechange", function(){
            if ( document.readyState === "complete" ) {
                document.detachEvent( "onreadystatechange", arguments.callee );
                msd_domReady();
            }
        });
    }

    /*
     * Get self id - actually only needed to show completion
     */
    function msd_getSelfThenModules() {
        var csrfToken = msd_getCsrfToken();
        fetch('/api/v1/users/self',{
                method: 'GET',
                credentials: 'include',
                headers: {
                    "Accept": "application/json",
                    "X-CSRF-Token": csrfToken
                }
            })
            .then(msd_status)
            .then(msd_json)
            .then(function(data) {
                console.log(data);
                msd_getTileFolder(initCourseId, data.id);
            })
            .catch(function(error) {
                console.log('getSelfId Request failed', error);
            }
        );
    }

    /*
     * Get tileImages for courseId
     */
    //function msd_getTileFolder(courseId, userId) {
    function msd_getTileFolder(courseId) {
        var csrfToken = msd_getCsrfToken();
        fetch('/api/v1/courses/' + courseId + '/folders',{
                method: 'GET',
                credentials: 'include',
                headers: {
                    "Accept": "application/json",
                    "X-CSRF-Token": csrfToken
                }
            })
            .then(msd_status)
            .then(msd_json)
            .then(function(data) {
                console.log(data);  
                var imagesFolderId;
                data.forEach(function(folder){
                    if(folder.name==tileImagesFolderName){
                        imagesFolderId = folder.id;  
                    }
                });
                //msd_getTileImageUrls(courseId, userId, imagesFolderId);
                msd_getTileImageUrls(courseId, imagesFolderId);
            });
    }

    //function msd_getTileImageUrls(courseId, userId, imagesFolderId) {
    function msd_getTileImageUrls(courseId, imagesFolderId) {
        /* temporarily getting file ids here - longer-term, replace with callbacks */
        var csrfToken = msd_getCsrfToken();
        if(imagesFolderId) {
            fetch('/api/v1/folders/' + imagesFolderId + '/files',{
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        "Accept": "application/json",
                        "X-CSRF-Token": csrfToken
                    }
                })
                .then(msd_status)
                .then(msd_json)
                .then(function(data) {
                    console.log(data);
                    data.forEach(function(image){
                        tileImageUrls.push(image.url);
                    });
                    msd_getModules(courseId, tileImageUrls);
                    //msd_getModules(courseId, userId, tileImageUrls);
                });
        } else {
            msd_getModules(courseId);
        }
    }
    
    /*
     * Get modules as ul list for courseId
     */
    //function msd_getModules(courseId, userId, tileImageUrls) {
    function msd_getModulesAsUl(courseId) {
        var csrfToken = msd_getCsrfToken();
        //fetch('/api/v1/courses/' + courseId + '/modules?include=items&student_id=' + userId,{
        //JHM 2018-10-26: Added &per_page=100, otherwise only returns the first 10
        fetch('/api/v1/courses/' + courseId + '/modules?include=items&per_page=100',{
                method: 'GET',
                credentials: 'include',
                headers: {
                    "Accept": "application/json",
                    "X-CSRF-Token": csrfToken
                }
            })
            .then(msd_status)
            .then(msd_json)
            .then(function(data) {
                //note - combining creation of lh modules sub-menu and Module tiles on Modules page to avoid repeated loops through data
                //set up some things before we begin going through Modules
                var listUl = document.createElement("ul");  //the contianing element for the modules sub-menu
                listUl.className = "section-tabs-sub";
                if(divContextModulesContainer && !initModuleId && divCourseHomeContent) {
                    //only needed on all Modules page IF it is the home page
                    //first delete any existing nav container
                    var existingModuleNav = document.getElementById('module_nav');
                    if(existingModuleNav) {
                        existingModuleNav.parentNode.removeChild(existingModuleNav);
                    }
                    //create our nav container
                    moduleNav = document.createElement("div");
                    moduleNav.id = "module_nav";
                    moduleNav.className = "ou-ModuleCard__box";
                    moduleNav.innerHTML = '<a id="module_nav_anchor"></a>';
                    divContent.insertBefore(moduleNav, divContent.childNodes[0]); //insert moduleNav onto page
                    
                    divCourseHomeContent.style.display = 'none';
                    
                    var newRow; //store parent row to append to between iterations
                }
                
                //run through each module
                data.forEach(function(module, mindex){
                    if(divContextModulesContainer && !initModuleId && divCourseHomeContent) {
                        //only needed on all Modules page
                        //create row for card
                        if(mindex % noOfColumnsPerRow === 0) {
                            newRow = document.createElement("div");
                            newRow.className = "grid-row center-sm";
                            moduleNav.appendChild(newRow);	
                        }
                        
                        var newColumn = document.createElement("div");

                        // TODO work out classes for noOfColumnsPerRow != 4
                        //create column wrapper
                        newColumn.className = "col-xs-12 col-sm-6 col-lg-3";
                        newRow.appendChild(newColumn);

                        //create module div
                        var moduleTile = document.createElement("div");
                        moduleTile.className = "ou-ModuleCard";
                        moduleTile.title = module.name;

                        var moduleTileLink = document.createElement("a");
                        moduleTileLink.href = '/courses/' + initCourseId + '/modules/' + module.id;   
                        
                        var moduleTileHeader = document.createElement("div");
                        moduleTileHeader.className="ou-ModuleCard__header_hero_short";
                        moduleTileHeader.style.backgroundColor = moduleColours[mindex];
                        
                        var moduleTileContent = document.createElement("div");
                        moduleTileContent.className = "ou-ModuleCard__header_content";
                       
                        if(showItemLinks && module.items.length > 0) {
                            //don't add drop-down if not showItemLinks or if no items in Module
                            var moduleTileActions = document.createElement("div");
                            moduleTileActions.className = "ou-drop-down-arrow";
                            moduleTileActions.title = "Click for contents";

                            var moduleTileArrowButton = document.createElement("a");
                            moduleTileArrowButton.classList.add("al-trigger");
                            moduleTileArrowButton.href ="#";

                            var moduleTileArrowIcon = document.createElement("i");
                            moduleTileArrowIcon.className = "icon-mini-arrow-down";

                            moduleTileArrowButton.appendChild(moduleTileArrowIcon);

                            var moduleTileList = document.createElement("ul");
                            moduleTileList.id = "toolbar-" + module.id + "-0";
                            moduleTileList.className = "al-options";
                            moduleTileList.setAttribute("role", "menu");
                            moduleTileList.tabIndex = 0;
                            moduleTileList.setAttribute("aria-hidden",true);
                            moduleTileList.setAttribute("aria-expanded",false);
                            moduleTileList.setAttribute("aria-activedescendant","toolbar-" + module.id + "-1");
                            console.log('creating actions and list');
                        }
                    }
                    //If we're on a page launched via Modules, initModuleItemId != 0 so or if we have launched the whole Modules page (ie need menu at top)
                    if(initModuleItemId || (divContextModulesContainer && !initModuleId && divCourseHomeContent)) {
                        module.items.forEach(function(item, iindex){
                            
                            moduleIdByModuleItemId[parseInt(item.id)] = item.module_id; //for deciding which sub-module on lh menu is active
                            
                            if(divContextModulesContainer && showItemLinks) {
                                var itemTitle = item.title;
                                //var moduleId = item.module_id;
                                var itemId = item.id;
                                var itemType = item.type;
                                var iconType;
                                switch(itemType) {
                                    case "Page":
                                        iconType = "icon-document";
                                        break;
                                    case "File":
                                        iconType = "icon-paperclip";
                                        break;
                                    case "Discussion":
                                        iconType = "icon-discussion";
                                        break;
                                    case "Quiz":
                                        iconType = "icon-quiz";
                                        break;
                                    case "Assignment":
                                        iconType = "icon-assignment";
                                        break;
                                    case "ExternalUrl":
                                        iconType = "icon-link";
                                        break;
                                    default:
                                        iconType = "icon-document";
                                }
                                var listItem = document.createElement('li');
                                listItem.className = 'ou-menu-item-wrapper';

                                var listItemDest = '/courses/' + initCourseId + '/modules/items/' + itemId;

                                var listItemLink = document.createElement("a");
                                listItemLink.className = iconType;
                                listItemLink.href = listItemDest;
                                listItemLink.text = itemTitle;
                                listItemLink.tabindex = -1;
                                listItemLink.setAttribute("role", "menuitem");
                                listItemLink.title = itemTitle;

                                listItem.appendChild(listItemLink);
                                moduleTileList.appendChild(listItem);    
                                console.log(itemTitle);
                            }
                        });
                    }
                    if(divContextModulesContainer && !initModuleId && divCourseHomeContent) {
                        //only needed on all Modules page
                        
                        var moduleTileTitle = document.createElement("div");
                        moduleTileTitle.classList.add("ou-ModuleCard__header-title");
                        moduleTileTitle.classList.add("ellipsis");
                        moduleTileTitle.title = module.name;
                        moduleTileTitle.style.color = moduleColours[mindex];
                        moduleTileTitle.innerHTML = module.name; 

                        if(showItemLinks && module.items.length > 0) {
                            //only add actions if required
                            moduleTileActions.appendChild(moduleTileArrowButton);
                            moduleTileActions.appendChild(moduleTileList);
                            moduleTileContent.appendChild(moduleTileActions);
                            console.log('adding actions');
                        } else {
                            //only leave space for actions if we're adding them
                            moduleTileTitle.classList.add("no-actions");  
                        }

                        moduleTileContent.appendChild(moduleTileTitle);
                        moduleTileLink.appendChild(moduleTileHeader);
                        moduleTileLink.appendChild(moduleTileContent);
                        moduleTile.appendChild(moduleTileLink);
                        newColumn.appendChild(moduleTile);
                    }
                    
                    //LH MENU
                    //create li
                    var newItem = document.createElement("li");
                    newItem.className = "section-sub";
                    listUl.appendChild(newItem);
                    //create a
                    var newLink = document.createElement("a");
                    newLink.className = "section-link-sub"; //Note set active if necessary
                    //console.log(initModuleId + " " + module.id);
                    //chcek if we need to make one of our sub-menu modules active
                    if((initModuleItemId && moduleIdByModuleItemId[initModuleItemId] && moduleIdByModuleItemId[initModuleItemId]==module.id) || (initModuleId && initModuleId==parseInt(module.id))) {
                        //first unactivate all lh menu items
                        var sectionLinks = document.querySelectorAll('li.section > a.active'); //should only be one!
                        Array.prototype.forEach.call(sectionLinks, function(sectionLink, i){
                            //code to remove active from here: http://youmightnotneedjquery.com/
                            var classNameToRemove = 'active';
                            if (sectionLink.classList) {
                                sectionLink.classList.remove(classNameToRemove);    
                            } else {
                                sectionLink.className = sectionLink.className.replace(new RegExp('(^|\\b)' + classNameToRemove.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');    
                            }
                        });
                        newLink.classList.add('active');  //make current Module active
                    }
                    newLink.title = module.name;
                    newLink.href = '/courses/' + courseId + '/modules/' + module.id;   
                    newLink.innerHTML = module.name;
                    newItem.appendChild(newLink);
                });
                var liModules = aModules.parentNode;
                liModules.appendChild(listUl);
            });
            //NOTE REMOVED FOR DEGUGGING - REINSTATE!!!!!!
            //.catch(function(error) {
            //    console.log('msd_getModules request failed', error);
            //}
        //);
    }

    /*
     * Get modules for courseId
     */
    //function msd_getModules(courseId, userId, tileImageUrls) {
    function msd_getModules(courseId, tileImageUrls) {
        var csrfToken = msd_getCsrfToken();
        //fetch('/api/v1/courses/' + courseId + '/modules?include=items&student_id=' + userId,{
        //JHM 2018-10-26: Added &per_page=100, otherwise only returns the first 10
        fetch('/api/v1/courses/' + courseId + '/modules?include=items&per_page=100',{
                method: 'GET',
                credentials: 'include',
                headers: {
                    "Accept": "application/json",
                    "X-CSRF-Token": csrfToken
                }
            })
            .then(msd_status)
            .then(msd_json)
            .then(function(data) {
                console.log(data);
                var newRow; //store parent row to append to between iterations
                //run through each module
                data.forEach(function(module, mindex){
                    //work out some properties
                    var moduleName = module.name;

                    //create row for card
                    if(mindex % noOfColumnsPerRow === 0) {
                        newRow = document.createElement("div");
                        newRow.className = "grid-row center-sm";
                        moduleNav.appendChild(newRow);	
                    }
                    var newColumn = document.createElement("div");

                    // TODO work out classes for noOfColumnsPerRow != 4
                    //create column wrapper
                    newColumn.className = "col-xs-12 col-sm-6 col-lg-3";
                    newRow.appendChild(newColumn);

                    //create module div
                    var moduleTile = document.createElement("div");
                    moduleTile.className = "ou-ModuleCard";
                    moduleTile.title = moduleName;

                    var moduleTileLink = document.createElement("a");
                    if(divContextModulesContainer) {
                        moduleTileLink.href ="#module_" + module.id;    
                    } else {
                        moduleTileLink.href = '/courses/' + courseId + '/modules/' + module.id;   
                    }


                    var moduleTileHeader = document.createElement("div");
                    moduleTileHeader.className="ou-ModuleCard__header_hero_short";
                    if(tileImageUrls && tileImageUrls.length > mindex) {
                        moduleTileHeader.style.backgroundImage = "url(" + tileImageUrls[mindex] + ")";    
                    } else {
                        moduleTileHeader.style.backgroundColor = moduleColours[mindex];
                    }

                    var moduleTileContent = document.createElement("div");
                    moduleTileContent.className = "ou-ModuleCard__header_content";

                    if(!tableHomePageTableTilesOnly) {
                        //don't add drop-down if TilesOnly
                        var moduleTileActions = document.createElement("div");
                        moduleTileActions.className = "ou-drop-down-arrow";
                        moduleTileActions.title = "Click for contents";

                        var moduleTileArrowButton = document.createElement("a");
                        moduleTileArrowButton.classList.add("al-trigger");
                        //moduleTileArrowButton.classList.add("btn");
                        //moduleTileArrowButton.classList.add("btn-small");
                        moduleTileArrowButton.href ="#";

                        var moduleTileArrowIcon = document.createElement("i");
                        moduleTileArrowIcon.className = "icon-mini-arrow-down";

                        moduleTileArrowButton.appendChild(moduleTileArrowIcon);

                        var moduleTileList = document.createElement("ul");
                        moduleTileList.id = "toolbar-" + module.id + "-0";
                        moduleTileList.className = "al-options";
                        moduleTileList.setAttribute("role", "menu");
                        moduleTileList.tabIndex = 0;
                        moduleTileList.setAttribute("aria-hidden",true);
                        moduleTileList.setAttribute("aria-expanded",false);
                        moduleTileList.setAttribute("aria-activedescendant","toolbar-" + module.id + "-1");

                        /* Now create drop-down menu */
                        module.items.forEach(function(item, iindex){
                            var itemTitle = item.title;
                            //var moduleId = item.module_id;
                            var itemId = item.id;
                            var itemType = item.type;
                            var iconType;
                            switch(itemType) {
                                case "Page":
                                    iconType = "icon-document";
                                    break;
                                case "File":
                                    iconType = "icon-paperclip";
                                    break;
                                case "Discussion":
                                    iconType = "icon-discussion";
                                    break;
                                case "Quiz":
                                    iconType = "icon-quiz";
                                    break;
                                case "Assignment":
                                    iconType = "icon-assignment";
                                    break;
                                case "ExternalUrl":
                                    iconType = "icon-link";
                                    break;
                                default:
                                    iconType = "icon-document";
                            }
                            var listItem = document.createElement('li');
                            listItem.className = 'ou-menu-item-wrapper';

                            var listItemDest = '/courses/' + courseId + '/modules/items/' + itemId;

                            var listItemLink = document.createElement("a");
                            listItemLink.className = iconType;
                            listItemLink.href = listItemDest;
                            listItemLink.text = itemTitle;
                            listItemLink.tabindex = -1;
                            listItemLink.setAttribute("role", "menuitem");
                            listItemLink.title = itemTitle;

                            listItem.appendChild(listItemLink);
                            moduleTileList.appendChild(listItem);
                        });

                        moduleTileActions.appendChild(moduleTileArrowButton);
                        moduleTileActions.appendChild(moduleTileList);
                    }

                    var moduleTileTitle = document.createElement("div");
                    moduleTileTitle.classList.add("ou-ModuleCard__header-title");
                    moduleTileTitle.classList.add("ellipsis");
                    if(tableHomePageTableTilesOnly) {
                        //only leave space for actions if we're adding them
                        moduleTileTitle.classList.add("no-actions");    
                    }
                    moduleTileTitle.title = moduleName;
                    moduleTileTitle.style.color = moduleColours[mindex];
                    moduleTileTitle.innerHTML = moduleName; 

                    if(!tableHomePageTableTilesOnly) {
                        //only add actions if required
                        moduleTileContent.appendChild(moduleTileActions);
                    }

                    moduleTileContent.appendChild(moduleTileTitle);

                    moduleTileLink.appendChild(moduleTileHeader);
                    moduleTileLink.appendChild(moduleTileContent);

                    moduleTile.appendChild(moduleTileLink);



                    newColumn.appendChild(moduleTile);

                    /* Following only if we are on the Modules page */
                    if(divContextModulesContainer) {
                        //now remove then add top buttons to each Canvas module to take back up to menu
                        var topButtons = document.querySelectorAll(".ou-top_button");
                        topButtons.forEach(function(topButton) {
                            topButton.parentNode.removeChild(topButton);
                        });

                        var canvasModuleHeaders = document.querySelectorAll(".ig-header");
                        canvasModuleHeaders.forEach(function(canvasModuleHeader) {
                            newTopButton = document.createElement("a");
                            newTopButton.className = "btn ou-top_button";
                            newTopButton.href = "#module_nav_anchor";
                            newTopButton.innerHTML = '<i class="icon-arrow-up"></i>Top';
                            canvasModuleHeader.appendChild(newTopButton);

                        });

                        //try and colour in each module
                        var canvasModuleDiv = document.getElementById('context_module_'+module.id);
                        canvasModuleDiv.style.borderLeftColor = moduleColours[mindex];
                        canvasModuleDiv.style.borderLeftWidth = '10px';
                        canvasModuleDiv.style.borderLeftStyle = 'solid';    
                    }
                });
            })
            .catch(function(error) {
                console.log('msd_getModules request failed', error);
            }
        );
    }

    /* Utility functions */
    /*
     * Function which returns a promise (and error if rejected) if response status is OK
     * @param {Object} response
     * @returns {Promise} either error or response
     */
    function msd_status(response) {
        if (response.status >= 200 && response.status < 300) {
            return Promise.resolve(response)
        } else {
            return Promise.reject(new Error(response.statusText))
        }
    }
    /*
     * Function which returns json from response
     * @param {Object} response
     * @returns {string} json from response
     */
    function msd_json(response) {
        return response.json();
    }
    /*
     * Function which returns csrf_token from cookie see: https://community.canvaslms.com/thread/22500-mobile-javascript-development
     * @returns {string} csrf token
     */
    function msd_getCsrfToken() {
        var csrfRegex = new RegExp('^_csrf_token=(.*)$');
        var csrf;
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var cookie = cookies[i].trim();
            var match = csrfRegex.exec(cookie);
            if (match) {
                csrf = decodeURIComponent(match[1]);
                break;
            }
        }
        return csrf;
    }

    /**
     * Function which gets find course id from wherever it is available - currently ONLY ON WEB
     * @returns {string} id of course
     */
    function msd_getCourseId() {
        var courseId = ENV.COURSE_ID || ENV.course_id;
        if(!courseId){
            var urlPartIncludingCourseId = window.location.href.split("courses/")[1]; 
            if(urlPartIncludingCourseId) {
                courseId = urlPartIncludingCourseId.split("/")[0];    
            }
        }
        return courseId;
    }
    
    /**
     * Function which gets find module_item_id from URL - currently ONLY ON WEB
     * @returns {int} id of module_item or 0 for not found
     */
    function msd_getModuleItemId() {
        var moduleItemTerm = 'module_item_id=';
        var currentUrl = window.location.href;
        var moduleItemId = 0; //default to 0/not found
        var startPos = currentUrl.indexOf(moduleItemTerm); //is this in URL
        if(startPos != -1) {
            startPos = startPos + moduleItemTerm.length; //account for length of moduleItemTerm as found beginning position
            var finishPos = currentUrl.indexOf('&', startPos); //is there another query param after module_item_id=
            if(finishPos == -1) {
                finishPos = currentUrl.length;
            }
            moduleItemId = parseInt(currentUrl.slice(startPos, finishPos));
            console.log(startPos + " " + finishPos + " " + currentUrl.slice(startPos, finishPos));
        }
        return moduleItemId;
    }
    
    /**
     * Function which gets find module id from URL - currently ONLY ON WEB
     * @returns {int} id of module or 0 for not found
     */
    function msd_getModuleId() {
        var moduleIdTerm = 'modules#module_';
        var currentUrl = window.location.href;
        var moduleId = 0; //default to 0/not found
        var startPos = currentUrl.indexOf(moduleIdTerm); //is this in URL
        if(startPos != -1) {
            startPos = startPos + moduleIdTerm.length; //account for length of moduleItemTerm as found beginning position
            moduleId = parseInt(currentUrl.slice(startPos)); //will substring from end
            //console.log(startPos + " " + finishPos + " " + currentUrl.slice(startPos, finishPos));
        }
        return moduleId;
    }

    /*
     * Function which inserts newNode after reeferenceNode From: https://stackoverflow.com/questions/4793604/how-to-insert-an-element-after-another-element-in-javascript-without-using-a-lib
     * @param {HTMLElement } newNode - the node to be inserted
     * @param {HTMLElement } referenceNode - the node after which newNode will be inserted
     */
    function msd_insertAfter(newNode, referenceNode) {
        referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
    }
    
    
    /*************************************************************
     *
     * End Canvas_Module-Tiles 
     *
     *************************************************************/
    
    
})();